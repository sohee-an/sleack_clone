{"version":3,"file":"94.js","mappings":"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","sources":["webpack://alecture/./components/ChatBox/styles.tsx","webpack://alecture/./components/ChatBox/index.tsx","webpack://alecture/./components/Chat/styles.tsx","webpack://alecture/./components/Chat/index.tsx","webpack://alecture/./components/ChatList/styles.tsx","webpack://alecture/./components/ChatList/index.tsx","webpack://alecture/./pages/DirectMessage/styles.tsx","webpack://alecture/./pages/DirectMessage/index.tsx","webpack://alecture/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from '@components/ChatBox/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    revalidate,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import { ChatWrapper } from '@components/Chat/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst BACK_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3095' : 'http://43.201.108.188';\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User;\n  console.log('chatdata position chat', data);\n  const result = useMemo(\n    () =>\n      // uploads\\\\서버주소\n      data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') ? (\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          input: data.content,\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { useCallback, forwardRef, RefObject, MutableRefObject } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          // 스크롤 위치 유지\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/DirectMessage/styles';\nimport { IDM } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport gravatar from 'gravatar';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router-dom';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    revalidate,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    // id는 상대방 아이디\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      setTimeout(() => {\n        scrollbarRef.current?.scrollToBottom();\n      }, 100);\n    }\n  }, [chatData]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        revalidate();\n      });\n    },\n    [revalidate, workspace, id],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n  console.log('chat', chatSections);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","styled","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","revalidate","mutate","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","console","log","result","useMemo","content","startsWith","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","Container","Header","DragOver","myData","useInput","setChat","useSWRInfinite","chatData","mutateChat","socket","useSocket","length","scrollbarRef","useState","dragOver","setDragOver","savedChat","prevChatData","unshift","SenderId","ReceiverId","Receiver","Date","scrollToBottom","axios","catch","onMessage","Number","getClientHeight","getScrollTop","getValues","setTimeout","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","onDragOver","makeSection","flat","reverse","ChatList","ChatBox","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}