{"version":3,"file":"925.js","mappings":"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","sources":["webpack://alecture/./components/ChatBox/styles.tsx","webpack://alecture/./components/ChatBox/index.tsx","webpack://alecture/./components/Chat/styles.tsx","webpack://alecture/./components/Chat/index.tsx","webpack://alecture/./components/ChatList/styles.tsx","webpack://alecture/./components/ChatList/index.tsx","webpack://alecture/./components/InviteChannelModal/index.tsx","webpack://alecture/./components/Modal/styles.tsx","webpack://alecture/./components/Modal/index.tsx","webpack://alecture/./hooks/useInput.ts","webpack://alecture/./hooks/useSocket.ts","webpack://alecture/./pages/Channel/styles.tsx","webpack://alecture/./pages/Channel/index.tsx","webpack://alecture/./pages/SignUp/styles.tsx","webpack://alecture/./utils/fetcher.ts","webpack://alecture/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from '@components/ChatBox/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    revalidate,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import { ChatWrapper } from '@components/Chat/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst BACK_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3095' : 'http://43.201.108.188';\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User;\n  console.log('chatdata position chat', data);\n  const result = useMemo(\n    () =>\n      // uploads\\\\서버주소\n      data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') ? (\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          input: data.content,\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { useCallback, forwardRef, RefObject, MutableRefObject } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          // 스크롤 위치 유지\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { revalidate: revalidateMembers } = useSWR<IUser[]>(\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CloseModalButton, CreateModal } from '@components/Modal/styles';\nimport React, { FC, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\n\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\n\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\n  const [value, setValue] = useState(initialData);\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setValue((e.target.value as unknown) as T);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;\n","import io from 'socket.io-client';\nimport { useCallback } from 'react';\n\n// const backUrl = 'http://http://43.201.108.188';\nconst backUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:3095' : 'http://43.201.108.188';\n\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\n  // console.log('rerender', workspace);\n  const disconnect = useCallback(() => {\n    if (workspace) {\n      sockets[workspace].disconnect();\n      delete sockets[workspace];\n    }\n  }, [workspace]);\n  if (!workspace) {\n    return [undefined, disconnect];\n  }\n  if (!sockets[workspace]) {\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router-dom';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  console.log('chadata', channelData);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    revalidate,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== myData?.id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onChangeFile = useCallback((e) => {\n    const formData = new FormData();\n    if (e.target.files) {\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < e.target.files.length; i++) {\n        const file = e.target.files[i].getAsFile();\n        console.log('... file[' + i + '].name = ' + file.name);\n        formData.append('image', file);\n      }\n    }\n    axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {});\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log(e, '.... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n","import styled from '@emotion/styled';\n\nexport const Header = styled.header`\n  text-align: center;\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  font-weight: 700;\n  font-size: 48px;\n  line-height: 46px;\n  letter-spacing: -0.75px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nexport const Form = styled.form`\n  margin: 0 auto;\n  width: 400px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 16px;\n  & > span {\n    display: block;\n    text-align: left;\n    padding-bottom: 8px;\n    font-size: 15px;\n    cursor: pointer;\n    line-height: 1.46666667;\n    font-weight: 700;\n  }\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\n  border: 1px solid var(--saf-0);\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\n  box-sizing: border-box;\n  margin: 0 0 20px;\n  width: 100%;\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\n  padding: 12px;\n  height: 44px;\n  padding-top: 11px;\n  padding-bottom: 13px;\n  font-size: 18px;\n  line-height: 1.33333333;\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 12px;\n  width: 100%;\n  max-width: 100%;\n  color: #fff;\n  background-color: #4a154b;\n  border: none;\n  font-size: 18px;\n  font-weight: 900;\n  height: 44px;\n  min-width: 96px;\n  padding: 0 16px 3px;\n  transition: all 80ms linear;\n  user-select: none;\n  outline: none;\n  cursor: pointer;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n  &:hover {\n    background-color: rgba(74, 21, 75, 0.9);\n    border: none;\n  }\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Error = styled.div`\n  color: #e01e5a;\n  margin: 8px 0 16px;\n  font-weight: bold;\n`;\n\nexport const Success = styled.div`\n  color: #2eb67d;\n  font-weight: bold;\n`;\n\nexport const LinkContainer = styled.p`\n  font-size: 13px;\n  color: #616061;\n  margin: 0 auto 8px;\n  width: 400px;\n  max-width: 400px;\n  & a {\n    color: #1264a3;\n    text-decoration: none;\n    font-weight: 700;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","import axios from 'axios';\n\nconst fetcher = (url: string) =>\n  axios\n    .get(url, {\n      withCredentials: true,\n    })\n    .then((response) => response.data);\n\nexport default fetcher;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","styled","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","revalidate","mutate","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","console","log","result","useMemo","content","startsWith","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","show","onCloseModal","setShowInviteChannelModal","channel","useInput","newMember","onChangeNewMember","setNewMember","revalidateMembers","onInviteMember","axios","catch","dir","toast","response","position","CreateModal","CloseModalButton","children","stopPropagation","onClick","initialData","useState","setValue","target","sockets","disconnect","io","transports","undefined","Container","Header","DragOver","myData","setChat","channelData","useSWRInfinite","chatData","mutateChat","channelMembersData","socket","useSocket","length","scrollbarRef","showInviteChannelModal","dragOver","setDragOver","savedChat","prevChatData","unshift","UserId","ChannelId","Channel","Date","scrollToBottom","onMessage","name","getClientHeight","getScrollTop","getValues","setTimeout","on","off","onClickInviteChannel","onDrop","formData","FormData","files","i","file","getAsFile","append","dataTransfer","items","kind","onDragOver","makeSection","flat","reverse","ChatList","ChatBox","InviteChannelModal","Label","Input","Button","Error","Success","LinkContainer","url","withCredentials","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}